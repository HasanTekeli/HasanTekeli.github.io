
JavaScript Notları


----------------------------------------
Types (JS'e girebileceğimiz elementler)
----------------------------------------
1. Number // matematik işlemleri yapabiliriz. Tek değişik olan % bu da bölümden kalan sayıyı verir (12 % 9 = 3). 
	Eğer eşittir işareti yapmak istersek === yapmamız gerekir. Tek = değişken atamaya yarıyor.

	!== Bu eşit değil anlamına geliyor. Ünlem işareti neyin başına gelirse onu olumsuz yapar.

2. String // Metin yazarken kullanılır. "" veya '' kullanılabilir. Metin içinde aynı işaretten varsa o işaretin önüne \ konulur (mesela 'She isn\'t lazy')

	- 10 + "34" = 1034 // Burada JS iki metni birleştirmeye çalıştığımızı düşünüyor. 10 - "3" = 7 burada da JS yanlış yazdığımızı ve ikincinin metin değil sayı olduğunu düşünüyor.

3. Boolean // True / False
	Örnek: 4 < 2 False

4. Undefined 
	- variable herhangi bir şeye atanmadığı zaman undefined olur.
	- Bunu mesela Signup formda e-posta ve şifre alanları için kullanabiliriz. Eğer veri undefined ise girilmesi gerektiğini hatırlatabliriz.

5. Null
	- boş object'lerde kullanılır ve kesinlikle değer atanamaz.
6. Symbol (New in ECMAScript 6) //
	- Bu tür tamamen unique elementler oluşturmak için kullanılır. Mesela;

		let sym1 = Symbol('foo');
		let sym2 = Symbol('foo');

	- Bu ikisi aynı görünse de (değer olarak), aynı değildir. Bunu aynı değerleri kullanan birçok farklı değişken yapacağımızda kullanmalıyız.

7. Object

--------------
JS Comparisons
--------------
!== Eşit Değildir
=== Eşittir
>= Büyük / Eşit
<= Küçük / Eşit
> Büyük
< Küçük

------------
JS Variables
------------
var // 
	- var george = "These pretzels are making me thirsty" + "!" Burada george kelimesine "" içindeki metni atadık, bu sayede tüm metni tekrar yazmadan george yazdığımızda metin gelecektir. 
	- Değişkenler sayı ile başlayamaz, bir harf ve sayı olabilir.
	- Değişkenler simge olarak sadece $ veya _ ile başlayabilir.
	- Variable olarak herhangi bir Type'ı kullanabiliriz (Numbers, Booleans etc..)

Girdilerle Toplama yapımı
-------------------------
prompt() sayfanın üstünde metin girebileceğimiz bir kutu çıkartır.
alert() ise bir uyarı kutusu çıkartır. Bu ikisini kullanarak toplama yapabiliriz.
	- var first = prompt("enter first number");
	  var second = prompt("enter second number"); 
	  var sum = Number(first) + Number(second); 
	  alert("The sum is: " + sum);

prompt() ile girilen değerler metin olarak görünür. Bunların sayı olduğunu JS'e söylemek için Number() kullanılabilir.

let ve const
------------

	const player = 'bobby';
	let experience = 100;
	let wizardLevel = false;

	if (experience = 90) {
		let wizardLevel = true;
		console.log('inside', wizardLevel);
	}

	console.log('outside', wizardLevel);

Yazdığımızda "inside true, outside false" çıktısını verir. let ile var arasındaki fark(let wizardLevel'lar yerine var wizardLevel yazsaydık), ikinci wizardLevel bir function'ın içinde olmadığı için önceki var'ı sıfırlayıp yeni değeri (true) atardı ve konsol çıktısı "inside true, outside true" olurdu.

const sabit bir değişkendir. Yeni bir değişken atanamaz. Bundan sonra var kullanmıyoruz, değişmeyen bir değişken(?) :) yapacaksak const, değişebilen bir değişken yazacaksak let kullanacağız. const içine object koyabiliriz ve bu object'lerin değerini değiştirebiliriz ancak değişkene başka bir değer atayamayız.

	const a = "Simon";
	const b = true;
	const c = {};

	const obj = { a, b, c, }

Template Strings

	const greeting = "Hello " + name + " you seem to be doing " + greeting + "!";

Bunu yapmak yerine 
	
	const name = "Sally";
	const age = 34;
	const pet = "horse";
	const greetingBest = `Hello ${name} you seem to be ${age-10}. What a lovely ${pet} you have.`;

Şeklinde yapabiliriz. 

Default Arguments

Üsttekini function içine ekleyebiliriz

	function greet(name='', age=30, pet='cat') {
		return `Hello ${name} you seem to be ${age-10}. What a lovely ${pet} you have.`;
	}

Bu function'ı çalıştırdığımızda konsola çıkan sonuç:
Hello  you seem to be 20. What a lovely cat you have. 

Bu function'ın değerlerini değiştirebiliriz.

	greet("john", 50, "monkey");

Değerleri değiştirirken tekrar atama yapmamıza gerek yok, sıralamayı tutturduğumuz sürece otomatik olarak kendisi atama yapar.

------------
Control Flow - JS Conditionals
------------

IF
	
	var name = "Billy";
	if (name === "Billy") {
		alert("hi Billy!");
	};

ELSE (iki seçenek)

	if (name === "Billy") {
		alert("hi Billy");
	} else {
		alert("hmm I don't know you");
	}

ELSE IF (ikiden fazla seçenek)

	if (name === "Billy") {
		alert("hi Billy!");
	} else if (name === "Suzy") {
		alert("Hi Suzy");
	} else {
		alert("I don't know you");
	}


Ternary Operator
----------------

	condition ? expr1 : expr2

Bunun anlamı condition doğruysa expr1'i çalıştır, yanlışsa expr2'yi çalıştır. Örnek olarak

	function isUserValid(bool) {
		return bool;
	}
	var answer = isUserValid(true) ? "You may enter" : "Access Denied";

Burada değeri true yaparsak "You may enter" bilgisini veriyor. False yaparsak "Access Denied" bilgisini veriyor.

	var automatedAnswer = 
		"Your account # is " + ( isUserValid(false) ? "1234" : "not available");

Üstteki değişken olan answer'ı biraz geliştirdik. Eğer değer doğru ise "Your account # is 1234", yanlış ise "Your account # is not available" yazısını veriyor.

Bunu yapmanın bir diğer yolu function oluşturmaktır. 

	function condition() {
		if (isUserValid(true)) {
			return "You may enter";
		} else {
			return "Access denied";
		}
	}

	var answer2 = condition();

Bu şekilde uzun uzun yazmaktansa üstteki gibi kısa ve öz yazmak daha etkilidir. 


Switch Statement
----------------

	function moveCommand(direction) {
		var whatHappens;
		switch(direction) {
			case "forward":
				whatHappens = "you encounter a monster";
				break;
			case "back":
				whatHappens = "you arrived home";
				break;
			case "right":
				whatHappens = "you found a river";
				break;
			case "left":
				whatHappens = "you run into a troll";
				break;
			default:
				whatHappens = "please enter a valid direction";
		}
		return whatHappens;
	}

Bir sürü if else statement kullanmaktansa switch statement çok daha kolay bir şekilde yazılabilir. Aralardaki break'lerin anlamı eğer condition tuttuysa (yani mesela forward yazıldıysa) diğer case'lere bakmadan function'dan çıkar ve sonrasında ne yapacağına bakar (üstteki örnekte "return whatHappens;").


----------------------
Logical Operators
-----------------
&& and, iki seçenek de doğru olmak zorunda

	if (firstName === "Bob" && lastName === "Smith") {
		alert("Hi Bob Smith");
	}

|| or, iki seçenekten biri doğru olmak zorunda

	if (name === "Billy" || name === "Suzy") {
		alert("Hi Billy or Suzy");
	}

! not, verilen seçenek olmamalı
	
	if (!(name === "Bob")) {
		alert("Hi Bob");
	}


-------------
JS Functions
-------------
arguments, function'larda parantez içine yazılan şeyler (console.log(helloo)). Bazı functionlarda birden fazla argument yazılabilir.

İki farklı function oluşturma yöntemi var
- Function Declaration

	function sayHello() {
		console.log("Hello");
	}
	sayhello();

Function'ın ismi belli


- Function Expression

	var sayBye = function() {
		console.log("Bye");
	}
	sayBye();

Function'ın ismi belli değil, bu yüzden anonymous function deniyor.

------------------------

	function sing() {
		console.log("AHHHHHHHHHH");
		console.log("TEEEEEEEEEE");
	}
	sing();

Bunu kullandığımızda değiştirmek zor olur.

	function sing(song){
		console.log(song);
	}
	sing("Laaaa deeee ddaaaaa");
	sing("helllooooo");
	sing("daaaa daaaaa");

Bunu kullandığımızda daha extensible, daha kolay olabilir.

Başka bir örnek

	function multiply(a, b) {
		return a * b
	}
	multiply(5, 10);

Eğer function bir sonuç verecekse (mesela matematik işlemleri) return ile yapmamız lazım. Bir function'ın içinde birden fazla return yazarsak, ilk return'den sonrasını okumaz ve function'ı sonlandırır. Bu örneğe IF statement eklersek bu durum geçersiz kalır, mesela:

	function multiply(a, b) {
		if (a > 10 || b > 10) {
			return "that's too hard"
		} else {
			return a*b;
		}
	}


Arrow Function
--------------

	function add(a, b) {
		return a + b;
	}

Yazmak yerine arrow function kullanılabilir.

	const add = (a, b) => a + b;

Eğer üstteki gibi function'ın içinde sadece bir return bulunuyorsa bunu arrow function'la tek satırda yapabiliriz. 

------------------------
Data Structures - Arrays
------------------------

Array'lerde köşeli parantez kullanılır.

	var listOfAnimals = ["tiger", "cat", "bear", "bird"];

Array içindeki itemlara ulaşmak için:
	
	list[1];

Itemlara ulaşırken saymaya sıfırdan başlamalıyız. Tiger'a ulaşmak için list[0] yazmalıyız.

Array içine her türden type koyabiliriz (numbers, booleans, functions etc...). Tüm türleri aynı array içinde de kullanabiliriz (mix of types), ancak performans açısından bu pek önerilmiyor. 

Array içinde array yapılabilir. Eğer array içinde array'in içindeki bir item'a ulaşacaksak;
	
	var list = [
		["tiger", "cat", "bear", "bird"]
	];

	console.log(list[0][2]);

bize ilk array'in içindeki (zaten bir tane var) üçüncü item olan bear'i verir.

Array Methods

	list.shift(); // ilk item'ı atar
	list.pop(); // son item'ı atar
	list.push("elephant"); // listeye bir item ekler
	list.concat(["bee", "deer"]) // listeye birden fazla item ekler 
									(array olarak) ancak concat ile eklenenler yeni bir liste olarak eklenir ve orijinal listede görünmezler, birden fazla array'i birleştirmede kullanılır.
	list.sort(); // listeyi (alfabetik, numerik) sıralar.
	list.reverse(); // listeyi tersten sıralar.
	list.splice(0, 1); // belirtilen item'ı listeden çıkartır (ilk
							array'in ikinci item'ı)

-------------------------
Data Structures - Objects
-------------------------

Bir değişken içinde farklı özellikleri toplamak için kullanılır. İki nokta kullanımına dikkat etmelisin.

	var user = {
		name: "John",
		age: 34,
		hobby: "Soccer",
		isMarried: false,
		spells: ["abrakadabra", "shazam", "boo"]
		shout: function() {
			console.log("AHHHH");
		}
	};

Object içinde array(spells) ve function(shout) kullanılabilir. Bir object'in içindeki function'a (object'ten sonra nokta ile yazılan şeyler - list.pop) "Method" denir.
Object içinden bir item'ı seçmek için
	
	user.name;
	user.age;

Object içine bir item eklemek için
	
	user.favoriteFood = "spinach";

Burada eşittir kullanıldı.

Bir item'ın değerini değiştirmek için:

	user.isMarried = true;

Array'ler liste yapmak için, object'ler bir şey hakkındaki farklı değerleri depolamak için daha uygun.

Array içinde object kullanılabilir:

	var list = [
		{
			username: "andy",
			password: "secret"
		}
		{
			username: "jess",
			password: "123"
		}
	]


---------------
Build Facebook
---------------

// Burada basit bir Facebook yapıldı. İlk olarak database isimli bir değişken oluşturuldu ve içerisine kayıtlı bir kullanıcı eklendi.

	var database = [
	{
		username: "John",
		password: "3456"
	}
	];

// İkinci olarak kullanıcı üstteki bilgilerle giriş yaptığında görebileceği bir timeline yapıldı.

	var newsFeed = [
		{
			username: "Jack",
			timeline: "Helloo everybody!!"
		},	
		{
			username: "Jones",
			timeline: "Byeeeee!!"
		},
		{
			username: "Whiskey",
			timeline: "Going to sleep!!"
		}
	];

// Üçüncü olarak kişinin sign in yapabilmesi için prompt ile kullanıcı adı ve şifre soruldu.

	var userNamePrompt = prompt("What's your username?");
	var passwordPrompt = prompt("Your password?");

// Kullanıcının adı ve şifresini kontrol edecek bir signIn function'ı oluşturuldu.

	function signIn(username, password) {
		if (username === database[0].username && password === database[0].password) {
			console.log(newsFeed);
		} else {
			alert("Sorry wrong username");
		}
	}

// Son olarak oluşturulan function'ın sayfa yüklenince başlaması için signIn komutu çalıştırıldı.

	signIn(userNamePrompt, passwordPrompt);

-----------
Terminology
-----------

1. function declaration
	function newFunction() {

	}

2. Function expression (noktalı virgül ile biter!)
	var newFunction = function() {

	};

3. expression (expression'lar noktalı virgül ile biter)
	1+3;
	var a = 2;
	return true;

4. calling or invoking a function
	alert()
	newFunction(param1, param2);

5. Assign a variable
	var a = true;

6. function vs method (bir objenin içindeki function)
	function thisIsAFunction() {

	}
------------------
	var obj = {
		thisIsAMethod: function() {

		}
	}

Function ve method'a ulaşma yöntemi de farklıdır.
thisIsAFunction() //function
obj.thisIsAMethod() //method


----------------------------------
Loops
----------------------------------
Loop işleri otomatikleştirmek için kullanılır. Mesela uzun bir todo listemiz var, ve bu listedeki her item'ın sonuna ünlem işareti koymak istiyoruz. Bunu tek tek yapmak oldukça zaman alabilir.


FOR Loop
--------
	
	var todos = [
	"clean room",
	"brush teeth",
	"exercise",
	"study js",
	"eat healthy"
	]

	for (var i=0; i < todos.length; i++) {

	}

Üstte görülen for loop'ların genel ifadesi, neredeyse her for loop'ta görülebilir. Açıklaması ise şöyle:
Burada kullanılan "i" loop'larda genel olarak kullanılan bir ifade, index'e karşılık geliyor. i=0'nun anlamı index'i 0'dan al, yani ilk item'dan başla. i < todos.length 'in anlamı "ilk olarak liste uzunluğunu al ve daha fazla uygulama", yani infinite loop'u durdurmak için kullanılır. i++ ise "ilk item'ı yaptıktan sonra diğer item'lara geç" demek (diğer bir deyişle i+1). 

	for (var i=0; i < todos.length; i++) {
		console.log(i);
	}

Yazdığımızda 0'dan başlayarak 4'e kadar sayıları basar. Çünkü 5. itemda bırakmasını söyledik.

	for (var i=0; i < todos.length; i++) {
		console.log(todos[i]);
	}

Yazdığımızda listedeki item'ları sıralar(clean room, brush teeth, etc..) Tüm itemların sonuna ! işareti koymak için (sadece console log çıktısına bir defalığına ekler):

	for (var i=0; i < todos.length; i++) {
		console.log(todos[i] + "!");
	}

Tüm console log çıktılarında göstermek için:

	for (var i=0; i < todos.length; i++) {
		todos[i] = todos[i] + "!";
	}

Önemli not: Bu tür bir loop'un içinde bir method kullanırsak (mesela todos.pop) "i < todos.length" işleminden dolayı sadece iki item kalana kadar işleme devam eder. Sorunlu olan (yani son iki item hariç hepsini çıkartan)

	for (var i=0; i < todos.length; i++) {
		todos.pop();
	}


Bunu düzeltmek için loop devreye girmeden todos.length'i bir değişkene atarız ve "i < todos.length" kısmını yeni değişken olan todosLength ile güncelleriz:

	var todosLength = todos.length;
	for (var i=0; i < todosLength; i++) {
		todos.pop();
	}

Bu şekilde yaptığımızda listedeki tüm itemları çıkartmış oluruz.


WHILE Loop
----------

	var counterOne = 0;
	while (counterOne < 10) {
		console.log(counterOne);
		counterOne++
	}

Bu loop'ta counterOne değişkenini 0 yaptık ve işlemin 10'dan küçük olmasını istedik. counterOne++ kısmında, konsol saymaya 0'dan başlar ve 10'dan küçük olacak şekilde en yüksek rakamda işlemi durdurur.

Bunun tersi, yani 10'dan geriye şu şekilde yapabiliriz. CounterOne'daki -- işaretine dikkat. Eğer bunu ++ yapsaydık tarayıcı 10'dan yukarı doğru saymaya başlar, bitirecek bir ifade olmadığı için infinite loop'a girer ve çökerdi.

	var counterOne = 10;
	while (counterOne > 0) {
		console.log(counterOne);
		counterOne--
	}


DO Loop (aka "do while loop")
--------

	var counterTwo = 10
	do {
		console.log(counterTwo);
		counterTwo--
	} while (counterTwo > 0)

while loop ile do-while loop arasındaki fark; while loop'ta ilk olarak condition'ı kontrol ediyor. (counterOne=0) yani CounterOne 0'dan büyükse o zaman console logu yap.

do while loop ise ilk olarak işi yapıyor sonra kontrol ediyor. Eğer her ikisinde de > 10 yaparsak ilki hiçbir çıktı vermez, çünkü ilk condition 10'dan küçük olması gerekir diyor. Ancak ikincisinde sadece konsola 10 yazar, sonrası gelmez. CounterTwo 10 olduğu için onu basar konsola sonrasında conditiona takılır.


FOREACH Loop (for ile farkı)
------------

for ve foreach aşağıdaki işlemde aynı işi yapıyor. Ancak forEach ile çok daha az kod yazarak aynı işlemi gereçekleştirebiliyoruz.

	var todos = [
		"clean room",
		"brush teeth",
		"exercise",
		"study js",
		"eat healthy"
		]

	//FOR
	var todosLength = todos.length;
	for (var i=0; i < todosLength; i++) {
		console.log(todos[i], i);
	}

	//FOREACH
	todos.forEach(function(todo, i) {
		console.log(todo, i);
	})

forEach bir array'in peşine yazılır ve devamında ne yapacağını sorar. todos ile yapacağımız iş function ile belirtilir.

Yukarıdaki forEach Loop'ta function'ı asıl işlemden ayırabiliriz.

	function logTodos(todo, i) {
		console.log(todo, i);
	}

	todos.forEach(logTodos);

Bu şekilde ayırdığımızda logTodos function'ını başka yerlerde de kullanabiliriz. Mesela başka bir listemiz daha varsa (mesela todosImportant) üstteki kodun altına şunu eklememiz yeterli:

	todosImportant.forEach(logTodos);


--------------
Facebook App 2
--------------

İlk facebook app'te sadece bir kullanıcı vardı, o yüzden sadece database[0] yazıp ilk kullanıcıyı kontrol ediyorduk. Ancak normalde böyle bir sitenin birden çok üyesi vardır. Bu yüzden tüm kullanıcıları tarayıp eşleşme var mı diye bakmamız gerek. Bunun içinde bir for loop yazmalıyız.

	function signIn(username, password) {
	for (var i=0; i < database.length; i++) {
		if(database[i].username === username && database[i].password === password) {
			console.log(newsFeed);
		} else {
			alert("Sorry, wrong username")
		}
	}

Ancak böyle yaptığımızda girdiğimiz bilgileri her bir kullanıcıyla karşılaştırır ve eşleşme bulamadığı her seferinde wrong username uyarısı verir, taki eşleşmeyi bulana kadar. Bunu engellemek için yeni bir function yaratıp eşleşme olup olmadığını arka planda kontrol etmeliyiz.

	function isUserValid(username, password) {
		for (var i=0; i < database.length; i++) {
			if(database[i].username === username && database[i].password === password) {
				return true;
			} 
		}
		return false;
	}

Bu function'da database'deki bilgilerle girilen bilgileri tek tek kontrol ediyor, eğer bir eşleşme yakalarsa return true değerini veriyor. Eşleşme yoksa sonraki return olan false'a geçiyor. Buradan sonra asıl kod olan sign in function'a geçiş yapıyoruz.

	function signIn(username, password) {
		if (isUserValid(username, password)) {
			console.log(newsfeed);
		} else {
			alert("Sorry wrong username");
		}
	}

Kullanıcı adı ve şifresini isUserValid function'ı ile arka planda kontrol ettikten sonra eğer bilgiler doğruysa konsola newsfeed'i log'luyoruz. Eğer false dönüş olmuşsa "Sorry wrong username" uyarısı geliyor.



----------------
ES6 and JS
----------------

ECMAScript (ES), standartlaştırılmış JavaScript'tir. ES6'in anlamı ECMAScript version 6'dır.

